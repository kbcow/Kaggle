# -*- coding: utf-8 -*-
"""타이타닉.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yD-01zc3yyQPkocbqtrUdWco_ztmfwiY
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

plt.style.use('seaborn')
sns.set(font_scale=2.5) # 이 두줄은 본 필자가 항상 쓰는 방법입니다. matplotlib 의 기본 scheme 말고 seaborn scheme 을 세팅하고, 일일이 graph 의 font size 를 지정할 필요 없이 seaborn 의 font_scale 을 사용하면 편합니다.
import missingno as msno

#ignore warnings
import warnings
warnings.filterwarnings('ignore')

# %matplotlib inline

df_train = pd.read_csv('/content/train.csv')
df_test = pd.read_csv('/content/test.csv')

df_train.head()

df_train.describe()

df_test.describe()

df_train.columns

df_train[col].shape[0]

"""# Null 값 확인"""

for col in df_train.columns:
    msg = 'column: {:>10}\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_train[col].isnull().sum() / df_train[col].shape[0]))
    print(msg)

for col in df_test.columns:
  msg = 'column: {:>10}\t Percent of NaN value: {:.2f}%'.format(col,100*(df_test[col].isnull().sum()/df_test[col].shape[0]))
  print(msg)

import missingno as msno
msno.matrix(df=df_train.iloc[:, :], figsize=(8, 8), color=(0.8, 0.5, 0.2))

msno.bar(df=df_train.iloc[:,:],figsize= (8,8),color = (0.8,0.5,0.2))

"""# Target label 확인"""

df_train['Survived'].value_counts()

f, ax = plt.subplots(1, 2, figsize=(18, 8))

df_train['Survived'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', ax=ax[0], shadow=True)
ax[0].set_title('Pie plot - Survived')
ax[0].set_ylabel('')

sns.countplot(x='Survived', data=df_train, ax=ax[1])  # 'x' 인자를 사용하여 x 축을 명시적으로 지정
ax[1].set_title('Count plot - Survived')

plt.show()

df_train[['Pclass','Survived']].groupby(['Pclass'],as_index=True).count()

df_train[['Pclass','Survived']].groupby(['Pclass'],as_index=True).sum()

pd.crosstab(df_train['Pclass'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')

df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar()

y_position = 1.02
f, ax = plt.subplots(1, 2, figsize=(16, 6))
df_train['Pclass'].value_counts().plot.bar(color=['#CD7F32','#FFDF00','#D3D3D3'], ax=ax[0])
ax[0].set_title('Number of Passengers By Pclass', y=y_position)
ax[0].set_ylabel('Count')
sns.countplot(x= 'Pclass', hue='Survived', data=df_train, ax=ax[1])
ax[1].set_title('Pclass: Survived vs Dead', y=y_position)
plt.show()

"""# SEX"""

ax

f, ax =plt.subplots(1,2,figsize = (14,8))
df_train[['Sex','Survived']].groupby(['Sex'],as_index=True).mean().plot.bar(ax=ax[0])
ax[0].set_title('Survived vs Sex')
sns.countplot(x= 'Sex',hue ='Survived',data=df_train,ax =ax[1])
ax[1].set_title('Sex: Survived vs Dead')
plt.show()

"""# Both Sex and Pclass"""

df_train[['Sex','Survived']].groupby(['Sex'],as_index=False).mean().sort_values(by='Survived',ascending=False)

pd.crosstab(df_train['Sex'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')

import seaborn as sns
sns.catplot(x='Pclass', y='Survived', hue='Sex', data=df_train, kind='point', height=6, aspect=1.5)

plt.show()

sns.catplot(x='Sex',y='Survived',col = 'Pclass',
               data=df_train,kind = 'point',height=6 ,aspect=1)
plt.show()

"""# Age"""

print('제일 나이 많은 탑승객 : {:.1f} Years'.format(df_train['Age'].max()))
print('제일 어린 탑승객 : {:.1f} Years'.format(df_train['Age'].min()))
print('탑승객 평균 나이 : {:.1f} Years'.format(df_train['Age'].mean()))

fig, ax = plt.subplots(1, 1, figsize=(9, 5))
sns.kdeplot(df_train[df_train['Survived'] == 1]['Age'], ax=ax)
sns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax=ax)
plt.legend(['Survived == 1', 'Survived == 0'])
plt.show()

plt.figure(figsize = (8,6))
df_train['Age'][df_train['Pclass']==1].plot(kind='kde')
df_train['Age'][df_train['Pclass']==2].plot(kind='kde')
df_train['Age'][df_train['Pclass']==3].plot(kind='kde')

plt.xlabel('Age')
plt.title('Age Distribution within classes')
plt.legend(['1st Class','2nd Class','3rd Class'])

cummulate_survival_ratio =[]
for i in range(1,80):
  cummulate_survival_ratio.append(df_train[df_train['Age']<i]['Survived'].sum()/len(df_train[df_train['Age']<i]))

plt.figure(figsize=(7,7))
plt.plot(cummulate_survival_ratio)
plt.title('Survival rate change depending on range of Age',y=1.02)
plt.ylabel('Survival rate')
plt.xlabel('Range of Age(0~x)')
plt.show()

"""# Pclass, Sex ,Age"""

f,ax=plt.subplots(1,2,figsize=(18,6))
sns.violinplot(x="Pclass",y="Age", hue="Survived", data=df_train, scale='count', split=True,ax=ax[0])
ax[0].set_title('Pclass and Age vs Survived')
ax[0].set_yticks(range(0,110,10))
sns.violinplot(x="Sex",y="Age", hue="Survived", data=df_train, scale='count', split=True,ax=ax[1])
ax[1].set_title('Sex and Age vs Survived')
ax[1].set_yticks(range(0,110,10))
plt.show()

"""# Embarked"""

f, ax = plt.subplots(1, 1, figsize=(7, 7))
df_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax)

f,ax= plt.subplots(2,2,figsize=(18,10))
sns.countplot(x='Embarked',data = df_train,ax=ax[0,0])

ax[0,0].set_title('(1) No. Of Passengers Boarded')
sns.countplot(x='Embarked',hue='Sex',data=df_train,ax=ax[0,1])

ax[0,1].set_title( '(2) Male-Female Split for Embarked')
sns.countplot(x='Embarked',hue ='Survived',data=df_train,ax=ax[1,0])

ax[1,0].set_title('(3) Embarked vs Survived')
sns.countplot(x='Embarked',hue = 'Pclass',data = df_train, ax= ax[1,1])

ax[1,1].set_title('(4) Embarked vs Pclass')
plt.subplots_adjust(wspace = 0.2,hspace = 0.5)
plt.show()

"""# Family - SibSp(형제 자매) + Parch(부모, 자녀)"""

df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1 # 자신을 포함해야하니 1을 더합니다
df_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] + 1 # 자신을 포함해야하니 1을 더합니다

print("Maximum size of Family: ", df_train['FamilySize'].max())
print("Minimum size of Family: ", df_train['FamilySize'].min())

f,ax=plt.subplots(1, 3, figsize=(40,10))
sns.countplot(x='FamilySize', data=df_train, ax=ax[0])
ax[0].set_title('(1) No. Of Passengers Boarded', y=1.02)

sns.countplot(x='FamilySize', hue='Survived', data=df_train, ax=ax[1])
ax[1].set_title('(2) Survived countplot depending on FamilySize',  y=1.02)

df_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax[2])
ax[2].set_title('(3) Survived rate depending on FamilySize',  y=1.02)

plt.subplots_adjust(wspace=0.2, hspace=0.5)
plt.show()

"""# Fare (탑승 요금)"""

fig,ax = plt.subplots(1,1 , figsize= (8,8))
g= sns.distplot(df_train['Fare'],color = 'b',label = 'Skewness : {:2f}'.format(df_train['Fare'].skew()),ax=ax)
g= g.legend(loc='best')

df_test.loc[df_test.Fare.isnull(),'Fare']= df_test['Fare'].mean()

df_train['Fare']= df_train['Fare'].map(lambda i: np.log(i) if i>0 else 0)
df_test['Fare'] = df_test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)

fix,ax =plt.subplots(1,1,figsize=(8,8))
g= sns.distplot(df_train['Fare'],color = 'b',label = 'Skewness : {:.2f}'.format(df_train['Fare'].skew()),ax=ax)
g= g.legend(loc='best')

"""# Cabin"""

df_train.head()

df_train['Ticket'].value_counts()

